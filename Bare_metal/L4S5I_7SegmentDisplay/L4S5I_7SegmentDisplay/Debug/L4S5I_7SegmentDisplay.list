
L4S5I_7SegmentDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000494  08000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004a0  080004a0  000014a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004a0  080004a0  000014a8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004a0  080004a8  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a0  080004a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004a4  080004a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004a8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004a8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006b5  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000016c  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f507  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006e9  00000000  00000000  00021298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae992  00000000  00000000  00021981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000090  00000000  00000000  000d0358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000d03e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800047c 	.word	0x0800047c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000004 	.word	0x20000004
 80001f8:	0800047c 	.word	0x0800047c

080001fc <SystemInit>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "stm32l4s5xx.h"

void SystemInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <SystemInit+0x20>)
 8000202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000206:	4a05      	ldr	r2, [pc, #20]	@ (800021c <SystemInit+0x20>)
 8000208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800020c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <main>:

int main(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 5; // enable GPIOC and GPIOA
 8000226:	4b6a      	ldr	r3, [pc, #424]	@ (80003d0 <main+0x1b0>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022a:	4a69      	ldr	r2, [pc, #420]	@ (80003d0 <main+0x1b0>)
 800022c:	f043 0305 	orr.w	r3, r3, #5
 8000230:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER &= ~0xFF; // GPIOC 0-3 output
 8000232:	4b68      	ldr	r3, [pc, #416]	@ (80003d4 <main+0x1b4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a67      	ldr	r2, [pc, #412]	@ (80003d4 <main+0x1b4>)
 8000238:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800023c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x55; // GPIOC 0-3 output
 800023e:	4b65      	ldr	r3, [pc, #404]	@ (80003d4 <main+0x1b4>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a64      	ldr	r2, [pc, #400]	@ (80003d4 <main+0x1b4>)
 8000244:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000248:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~0xFFFF; // GPIOA 0-7 output
 800024a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000254:	0c1b      	lsrs	r3, r3, #16
 8000256:	041b      	lsls	r3, r3, #16
 8000258:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x5555; // GPIOA 0-3 output
 800025a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000264:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000268:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800026c:	6013      	str	r3, [r2, #0]
	for(volatile uint32_t rpt=0; rpt<0x7FFFF; rpt++);
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e002      	b.n	800027a <main+0x5a>
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4a56      	ldr	r2, [pc, #344]	@ (80003d8 <main+0x1b8>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d9f8      	bls.n	8000274 <main+0x54>
	GPIOC->ODR |= 0xF; // turn off all segments
 8000282:	4b54      	ldr	r3, [pc, #336]	@ (80003d4 <main+0x1b4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a53      	ldr	r2, [pc, #332]	@ (80003d4 <main+0x1b4>)
 8000288:	f043 030f 	orr.w	r3, r3, #15
 800028c:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= 0xFF; // turn off all segments
 800028e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000298:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 800029c:	6153      	str	r3, [r2, #20]
	const uint8_t digits[] = {0x3f, 0x30, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
 800029e:	4a4f      	ldr	r2, [pc, #316]	@ (80003dc <main+0x1bc>)
 80002a0:	f107 0310 	add.w	r3, r7, #16
 80002a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a6:	c303      	stmia	r3!, {r0, r1}
 80002a8:	801a      	strh	r2, [r3, #0]
	uint32_t indx=0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1)
	{
		indx=0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	627b      	str	r3, [r7, #36]	@ 0x24
		for (uint32_t loop = 0; loop < 0xFFF; ++loop) {
 80002b2:	2300      	movs	r3, #0
 80002b4:	623b      	str	r3, [r7, #32]
 80002b6:	e03c      	b.n	8000332 <main+0x112>
			GPIOC->ODR |= 0xF; // turn off all segments
 80002b8:	4b46      	ldr	r3, [pc, #280]	@ (80003d4 <main+0x1b4>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a45      	ldr	r2, [pc, #276]	@ (80003d4 <main+0x1b4>)
 80002be:	f043 030f 	orr.w	r3, r3, #15
 80002c2:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<(3-indx)); // turn on only one digit
 80002c4:	4b43      	ldr	r3, [pc, #268]	@ (80003d4 <main+0x1b4>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002ca:	f1c2 0203 	rsb	r2, r2, #3
 80002ce:	2101      	movs	r1, #1
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a3e      	ldr	r2, [pc, #248]	@ (80003d4 <main+0x1b4>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= 0xFF; // turn off all segments
 80002de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e8:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80002ec:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~digits[indx]; // display digit
 80002ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f107 0110 	add.w	r1, r7, #16
 80002f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002fa:	440a      	add	r2, r1
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	43d2      	mvns	r2, r2
 8000300:	4611      	mov	r1, r2
 8000302:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000306:	400b      	ands	r3, r1
 8000308:	6153      	str	r3, [r2, #20]
			indx = indx==4 ? 0 : indx+1;
 800030a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800030c:	2b04      	cmp	r3, #4
 800030e:	d002      	beq.n	8000316 <main+0xf6>
 8000310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000312:	3301      	adds	r3, #1
 8000314:	e000      	b.n	8000318 <main+0xf8>
 8000316:	2300      	movs	r3, #0
 8000318:	627b      	str	r3, [r7, #36]	@ 0x24
			for(volatile uint32_t rpt=0; rpt<0xFF; rpt++);
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	e002      	b.n	8000326 <main+0x106>
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3301      	adds	r3, #1
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	2bfe      	cmp	r3, #254	@ 0xfe
 800032a:	d9f9      	bls.n	8000320 <main+0x100>
		for (uint32_t loop = 0; loop < 0xFFF; ++loop) {
 800032c:	6a3b      	ldr	r3, [r7, #32]
 800032e:	3301      	adds	r3, #1
 8000330:	623b      	str	r3, [r7, #32]
 8000332:	6a3b      	ldr	r3, [r7, #32]
 8000334:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000338:	4293      	cmp	r3, r2
 800033a:	d9bd      	bls.n	80002b8 <main+0x98>
		}
		indx=0;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (uint32_t loop = 0; loop < 0xFFF; ++loop)
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
 8000344:	e03d      	b.n	80003c2 <main+0x1a2>
		{
			GPIOC->ODR |= 0xF; // turn off all segments
 8000346:	4b23      	ldr	r3, [pc, #140]	@ (80003d4 <main+0x1b4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a22      	ldr	r2, [pc, #136]	@ (80003d4 <main+0x1b4>)
 800034c:	f043 030f 	orr.w	r3, r3, #15
 8000350:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<(3-indx)); // turn on only one digit
 8000352:	4b20      	ldr	r3, [pc, #128]	@ (80003d4 <main+0x1b4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000358:	f1c2 0203 	rsb	r2, r2, #3
 800035c:	2101      	movs	r1, #1
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	43d2      	mvns	r2, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a1b      	ldr	r2, [pc, #108]	@ (80003d4 <main+0x1b4>)
 8000368:	400b      	ands	r3, r1
 800036a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= 0xFF; // turn off all segments
 800036c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000376:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 800037a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~digits[indx+4]; // display digit
 800037c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000384:	3204      	adds	r2, #4
 8000386:	3228      	adds	r2, #40	@ 0x28
 8000388:	443a      	add	r2, r7
 800038a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800038e:	43d2      	mvns	r2, r2
 8000390:	4611      	mov	r1, r2
 8000392:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000396:	400b      	ands	r3, r1
 8000398:	6153      	str	r3, [r2, #20]
			indx = indx==4 ? 0 : indx+1;
 800039a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800039c:	2b04      	cmp	r3, #4
 800039e:	d002      	beq.n	80003a6 <main+0x186>
 80003a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a2:	3301      	adds	r3, #1
 80003a4:	e000      	b.n	80003a8 <main+0x188>
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	@ 0x24
			for(volatile uint32_t rpt=0; rpt<0xFF; rpt++);
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	e002      	b.n	80003b6 <main+0x196>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3301      	adds	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80003ba:	d9f9      	bls.n	80003b0 <main+0x190>
		for (uint32_t loop = 0; loop < 0xFFF; ++loop)
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	3301      	adds	r3, #1
 80003c0:	61fb      	str	r3, [r7, #28]
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d9bc      	bls.n	8000346 <main+0x126>
		indx=0;
 80003cc:	e76f      	b.n	80002ae <main+0x8e>
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	48000800 	.word	0x48000800
 80003d8:	0007fffe 	.word	0x0007fffe
 80003dc:	08000494 	.word	0x08000494

080003e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e4:	f7ff ff0a 	bl	80001fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	@ (8000420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	@ (800042c <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040e:	f000 f811 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000412:	f7ff ff05 	bl	8000220 <main>

08000416 <LoopForever>:

LoopForever:
    b LoopForever
 8000416:	e7fe      	b.n	8000416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000418:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000424:	080004a8 	.word	0x080004a8
  ldr r2, =_sbss
 8000428:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800042c:	2000001c 	.word	0x2000001c

08000430 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC1_IRQHandler>
	...

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4d0d      	ldr	r5, [pc, #52]	@ (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	@ (8000470 <__libc_init_array+0x3c>)
 800043a:	1b64      	subs	r4, r4, r5
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2600      	movs	r6, #0
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4d0b      	ldr	r5, [pc, #44]	@ (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	@ (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2600      	movs	r6, #0
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	080004a0 	.word	0x080004a0
 8000470:	080004a0 	.word	0x080004a0
 8000474:	080004a0 	.word	0x080004a0
 8000478:	080004a4 	.word	0x080004a4

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
